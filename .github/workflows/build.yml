name: Create GitHub Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        qt_version: ['6.5.0']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        arch: ${{ runner.os == 'macos-latest' && 'clang_64' || '' }}

    - name: Install FFmpeg (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install FFmpeg (macOS)
      if: runner.os == 'macOS'
      run: brew install ffmpeg

    - name: Install FFmpeg (Windows)
      if: runner.os == 'Windows'
      run: choco install ffmpeg

    - name: Configure CMake
      run: cmake . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=${{ env.QT_DIR }}

    - name: Build with CMake
      run: cmake --build build --config Release

    - name: Package Application (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        mkdir dist
        cp build/Release/VideoCompressor.exe dist/
        windeployqt.exe --no-translations dist/VideoCompressor.exe
        cp "$(which ffmpeg.exe)" dist/
        cp "$(which ffprobe.exe)" dist/
        7z a -tzip VideoCompressor-Windows.zip ./dist/*

    - name: Package Application (macOS)
      if: runner.os == 'macOS'
      run: |
        macdeployqt build/VideoCompressor.app -dmg
        mv build/VideoCompressor.dmg VideoCompressor-macOS.dmg

    - name: Package Application (Linux)
      if: runner.os == 'Linux'
      run: |
        # Download and prepare linuxdeployqt
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage

        # Create a self-contained AppDir
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        
        # Copy our application and its dependencies
        cp build/VideoCompressor AppDir/usr/bin/
        cp $(which ffmpeg) AppDir/usr/bin/
        cp $(which ffprobe) AppDir/usr/bin/
        
        # Create a .desktop file
        echo "[Desktop Entry]" > AppDir/videocompressor.desktop
        echo "Name=Pro Video Compressor" >> AppDir/videocompressor.desktop
        echo "Exec=VideoCompressor" >> AppDir/videocompressor.desktop
        echo "Icon=videocompressor" >> AppDir/videocompressor.desktop
        echo "Type=Application" >> AppDir/videocompressor.desktop
        echo "Categories=AudioVideo;" >> AppDir/videocompressor.desktop
        
        # NOTE: For a real icon, you would add a `videocompressor.png` file to your repo
        # and copy it to `AppDir/usr/share/icons/hicolor/256x256/apps/`

        # Run linuxdeployqt to bundle dependencies and create the AppImage
        ./linuxdeployqt-continuous-x86_64.AppImage AppDir/usr/bin/VideoCompressor -appimage
        
        # Rename the final AppImage for consistency
        mv Pro_Video_Compressor*.AppImage VideoCompressor-Linux-x86_64.AppImage

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: VideoCompressor-${{ runner.os }}
        path: |
          VideoCompressor-Windows.zip
          VideoCompressor-macOS.dmg
          VideoCompressor-Linux-x86_64.AppImage
        if-no-files-found: 'ignore'

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            artifacts/VideoCompressor-Windows/VideoCompressor-Windows.zip
            artifacts/VideoCompressor-macOS/VideoCompressor-macOS.dmg
            artifacts/VideoCompressor-Linux/VideoCompressor-Linux-x86_64.AppImage
