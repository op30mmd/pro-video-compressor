name: Create GitHub Release

# This workflow runs when a new tag starting with 'v' is pushed to the repository.
# Example: v1.0, v1.2.3
on:
  push:
    tags:
      - 'v*'

jobs:
  # The 'build' job compiles the application on all three platforms.
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        qt_version: ['6.5.0']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        arch: ${{ runner.os == 'macos-latest' && 'clang_64' || '' }}

    - name: Install FFmpeg (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install FFmpeg (macOS)
      if: runner.os == 'macOS'
      run: brew install ffmpeg

    - name: Install FFmpeg (Windows)
      if: runner.os == 'Windows'
      run: choco install ffmpeg

    - name: Configure CMake
      run: cmake . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=${{ env.QT_DIR }}

    - name: Build with CMake
      run: cmake --build build --config Release

    # --- Packaging Steps for Each OS ---
    - name: Package Application (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        mkdir dist
        cp build/Release/VideoCompressor.exe dist/
        windeployqt.exe --no-translations dist/VideoCompressor.exe
        # --- THE DEFINITIVE FIX ---
        # Manually copy the styles plugin using the correct bash variable syntax.
        mkdir -p dist/styles
        cp "$QT_DIR/plugins/styles/qwindowsvistastyle.dll" dist/styles/
        
        cp "$(which ffmpeg.exe)" dist/
        cp "$(which ffprobe.exe)" dist/
        7z a -tzip VideoCompressor-Windows.zip ./dist/*

    - name: Package Application (macOS)
      if: runner.os == 'macOS'
      run: |
        macdeployqt build/VideoCompressor.app -dmg
        mv build/VideoCompressor.dmg VideoCompressor-macOS.dmg

    - name: Package Application (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p dist/bin
        cp build/VideoCompressor dist/bin/
        # Add a note about dependencies
        echo "Please ensure you have Qt6 and FFmpeg installed on your system to run this application." > dist/README.txt
        tar -czvf VideoCompressor-Linux.tar.gz -C dist .

    # Upload the packaged file as an artifact for the 'release' job to use.
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: VideoCompressor-${{ runner.os }}
        path: |
          VideoCompressor-Windows.zip
          VideoCompressor-macOS.dmg
          VideoCompressor-Linux.tar.gz
        if-no-files-found: 'ignore'

  # The 'release' job runs after all builds are successful.
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build # Depends on the 'build' job
    permissions:
      contents: write # Required to create a release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into an 'artifacts' directory

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # This action automatically finds the pushed tag (e.g., v1.0),
          # creates a release with that name, and generates release notes.
          generate_release_notes: true
          # Attach all the downloaded build artifacts to the release.
          files: |
            artifacts/VideoCompressor-Windows/VideoCompressor-Windows.zip
            artifacts/VideoCompressor-macOS/VideoCompressor-macOS.dmg
            artifacts/VideoCompressor-Linux/VideoCompressor-Linux.tar.gz
